{"version":3,"sources":["SeasonDisplay.js","LoadSpinner.js","ErrorMessage.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonsDisplay","props","lat","month","season","latitude","Date","getMonth","_seasonConfig$season","react_default","a","createElement","className","concat","LoadSpinner","message","defaultProps","ErrorMessage","errorMessage","App","state","_this2","this","navigator","geolocation","getCurrentPosition","pos","setState","coords","err","src_ErrorMessage_0","src_SeasonDisplay","src_LoadSpinner","renderContent","React","Component","ReactDOM","render","src_App","document","querySelector"],"mappings":"wQAGMA,SAAe,CACjBC,OAAQ,CACJC,KAAI,uBACJC,SAAQ,OAEZC,OAAQ,CACJF,KAAI,qBACJC,SAAQ,eAuBDE,EAXQ,SAACC,GACpB,IATeC,EAAKC,EASdC,GATSF,EASUD,EAAMI,UATXF,GASqB,IAAIG,MAAOC,YARvC,GAAKJ,EAAQ,EACfD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIFM,EAEHb,EAAaS,GAAhCP,EAFsBW,EAEtBX,KAAMC,EAFgBU,EAEhBV,SAEd,OAAOW,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,OAAoBT,IACrCK,EAAAC,EAAAC,cAAA,KAAGC,UAAS,qBAAAC,OAAwBf,EAAxB,mBACZW,EAAAC,EAAAC,cAAA,UAAKd,GACLY,EAAAC,EAAAC,cAAA,KAAGC,UAAS,sBAAAC,OAAyBf,EAAzB,qBC3BdgB,EAAc,SAACb,GACjB,OACAQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAAwBX,EAAMc,WAKrDD,EAAYE,aAAe,CACvBD,QAAS,cAIED,QCDAG,eAXM,SAAChB,GAClB,OACIQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,0DACIF,EAAAC,EAAAC,cAAA,WADJ,sBAEIF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,UAAKV,EAAMiB,kBCD3BC,6MACFC,MAAQ,CAAEf,SAAU,KAAMa,aAAc,uFAEpB,IAAAG,EAAAC,KAChBC,UAAUC,YAAYC,mBAClB,SAAAC,GAAG,OAAIL,EAAKM,SAAS,CAAEtB,SAAUqB,EAAIE,OAAOvB,YAC5C,SAAAwB,GAAG,OAAIR,EAAKM,SAAS,CAAET,aAAcW,EAAId,oDAK7C,OAAIO,KAAKF,MAAMF,eAAiBI,KAAKF,MAAMf,SAChCI,EAAAC,EAAAC,cAACmB,EAAD,CAAcZ,aAAcI,KAAKF,MAAMF,gBAG7CI,KAAKF,MAAMF,cAAgBI,KAAKF,MAAMf,SAChCI,EAAAC,EAAAC,cAACoB,EAAD,CAAgB1B,SAAUiB,KAAKF,MAAMf,WAGxCI,EAAAC,EAAAC,cAACqB,EAAD,CAAajB,QAAQ,wEAI7B,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACVU,KAAKW,wBAzBJC,IAAMC,WA+BxBC,IAASC,OAAO5B,EAAAC,EAAAC,cAAE2B,EAAF,MAASC,SAASC,cAAc","file":"static/js/main.6b2b8bfd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SeasonDisplay.css';\r\n\r\nconst seasonConfig = {\r\n    summer: {\r\n        text: `Let's hit the beach!`,\r\n        iconName: `sun`\r\n    },\r\n    winter: {\r\n        text: `Brrr, it's chilly!`,\r\n        iconName: `snowflake`\r\n    }\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n    if ( month > 2 && month < 9 ) {\r\n        return lat > 0 ? 'summer' : \"winter\";\r\n    } else {\r\n        return lat > 0 ? 'winter' : 'summer';\r\n    }\r\n};\r\n\r\nconst SeasonsDisplay = (props) => {\r\n    const season = getSeason(props.latitude, new Date().getMonth());\r\n    const { text, iconName } = seasonConfig[season];\r\n\r\n    return <div className={`season-display ${season}`}>\r\n        <i className= {`icon-left massive ${iconName} loading icon`} />\r\n        <h1>{text}</h1>\r\n        <i className= {`icon-right massive ${iconName} loading icon`} />\r\n    </div>    \r\n};\r\n\r\nexport default SeasonsDisplay;","import React from 'react';\r\n\r\nconst LoadSpinner = (props) => {\r\n    return  (\r\n    <div className=\"ui active dimmer\">\r\n        <div className=\"ui large text loader\">{props.message}</div>\r\n    </div>\r\n    );\r\n};\r\n\r\nLoadSpinner.defaultProps = {\r\n    message: 'Loading...'\r\n};\r\n\r\n\r\nexport default LoadSpinner;","import React from 'react';\r\nimport './ErrorMessage.css';\r\n\r\nconst ErrorMessage = (props) => {\r\n    return (\r\n        <div className=\"err-display\">\r\n            <h3>Sorry! We are not able to display the season.\r\n                <br />Here is the reason:\r\n                <br /><em>{props.errorMessage}</em>\r\n            </h3>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ErrorMessage;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonsDisplay from './SeasonDisplay';\r\nimport LoadSpinner from './LoadSpinner';\r\nimport './index.css';\r\nimport ErrorMessage from './ErrorMessage';\r\n\r\nclass App extends React.Component {\r\n    state = { latitude: null, errorMessage: '' };\r\n\r\n    componentDidMount() {\r\n        navigator.geolocation.getCurrentPosition(\r\n            pos => this.setState({ latitude: pos.coords.latitude }),\r\n            err => this.setState({ errorMessage: err.message})\r\n        );\r\n    }\r\n\r\n    renderContent() {\r\n        if (this.state.errorMessage && !this.state.latitude) {\r\n            return <ErrorMessage errorMessage={this.state.errorMessage}/>\r\n        }\r\n        \r\n        if (!this.state.errorMessage && this.state.latitude) {\r\n            return <SeasonsDisplay latitude={this.state.latitude} />;\r\n        }\r\n\r\n        return  <LoadSpinner message='Please accept the location request'/>;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"border\">\r\n                {this.renderContent()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(< App/>, document.querySelector('#root'));"],"sourceRoot":""}